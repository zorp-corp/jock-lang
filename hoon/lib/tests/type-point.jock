/*  A class is broadly equivalent to a Hoon door. It has a top-level
    sample which represents its state, along with methods that have
    each their own samples.

    A class must be composed into the subject to be accessible.
*/
compose
  class Foo(x:@) {
    // load() is the required constructor
    load(p:@) -> Foo {
      // the return must match the output shape
      p
    }
  }
; // end compose

// use the implicit load() constructor
// Foo(42)

let a = Foo(42);
a

/*
=>  |_  x=@
    ++  load
      |=  p=@
      p
    --
(load 42)
[7 [8 [1 0] [1 8 [1 0] [1 0 6] 0 1] 0 1] 8 [9 2 0 1] 9 2 10 [6 7 [0 3] 1 42] 0 2]

!=  =>  |_  x=@
      ++  load
        |=  p=@
        p
      --
  (load 42)
[7 [8 [1 0] [1 8 [1 0] [1 0 6] 0 1] 0 1] 8 [9 2 0 1] 9 2 10 [6 7 [0 3] 1 42] 0 2]

!=  =>  |_  x=@
      ++  load
        |=  p=@
        p
      --
  =/  a  (load 42)
  a

[7 [8 [1 0] [1 8 [1 0] [1 0 6] 0 1] 0 1] 8 [8 [9 2 0 1] 9 2 10 [6 7 [0 3] 1 42] 0 2] 0 2]
[7 [8 [1 0] [1 8 [1 0] [1 0 6] 0 1] 0 1] 8 [8 [9 1 0 1] 9 2 10 [6 7 [0 3] 1 42] 0 2] 0 3]

actual:
[7 [8 [1 0] [1 8 [1 0] [1 0 6] 0 1] 0 1] 8 [8 [9 1 0 1] 9 2 10 [6 7 [0 3] 1 42] 0 2] 0 3]

*/

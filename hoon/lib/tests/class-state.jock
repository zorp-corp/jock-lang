compose
  class Point(x:@ y:@) {
    add(p:(x:@ y:@)) -> Point {
      (x + p.x
       y + p.y)
    }
    inc(q:@) -> @ {
      +(q)
    }
  }
;

let origin = Point(70 80);
(origin.y() origin.x())

/*
:: notice that in this Hoon, pigeon is the sample
:: while in Jock it's an instance ~(. door pigeon)
!=
=>  mini=mini
=>
  ^=  door
  |_  [x=@ y=@]
  ++  add
    |=  p=[x=@ y=@]
    [(add:mini x x.p) (add:mini y y.p)]
  ++  inc
    |=  q=@
    +(q)
  --
=/  origin
  ~(. door [70 80])
[+13 +12]:origin

!=
=>
  ^=  door
  |_  [x=@ y=@]
  ++  inc
    |=  [p=@ q=@]
    +(q)
  --
=/  origin
  ~(. door [70 80])
+13:origin

*/

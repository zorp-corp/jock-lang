compose
  class Point(x:@ y:@) {
   add(p:(x:@ y:@)) -> Point {
     (x + p.x
      y + p.y)
   }
   sub(p:(x:@ y:@)) -> Point {
     (x - p.x
      y - p.y)
   }
  }
;

let point-1 = Point(104 124);
point-1 = point-1.add(38 38);
let point-2 = Point(30 40);
point-2 = point-2.add(212 302);
point-1 = point-1.sub(100 20);
( (point-1.x() point-1.y())
  (point-2.x() point-2.y())
)

/*
::  Hoon equivalent program
!=
=>  mini=mini
=>
  ^=  door
  |_  [x=@ y=@]
  ++  add
    |=  p=[x=@ y=@]
    ~(. +> [(add:mini x x.p) (add:mini y y.p)])
  ++  sub
    |=  p=[x=@ y=@]
    ~(. +> [(sub:mini x x.p) (sub:mini y y.p)])
  --
=/  point-1
  ~(. door [104 124])
=.  point-1  (add:point-1 [38 38])
=/  point-2
  ~(. door [30 40])
=.  point-2  (add:point-2 [212 302])
=.  point-1  (sub:point-1 [100 20])
[[+12 +13]:point-1 [+12 +13]:point-2]
*/

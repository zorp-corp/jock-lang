compose
  class Point(x:@) {
    add(p:(x:@ y:@)) -> Point {
      (x p.x)
      // (&31)
      // &14 [[8 [[1 0] 1 0] [1 0 14] 0 1] 8 [1 0] [1 4 0 6] 0 1] = door battery
      // &30 0 door sample
      // &31 door context
      //&7 //x + p.x
    }
    inc(q:@) -> @ {
      +(q)
    }
  }
;

// Point(50)
let origin = Point(50);
// origin
origin.add(70 80)
// origin.inc(500)

/*
:: this one is the equivalent to the above
!=
=>  mini=mini
=>
|_  x=@
++  add
  |=  p=[x=@ y=@]
  (add:mini x x.p)
++  inc
  |=  q=@
  +(q)
--
=/  origin
  ~(. . 50)
(inc:origin 500)

=/  origin
  ~(. . 50)
(add:origin [70 80])

:: to check axes:
=>  mini

* jype resolution

=mini -build-file /===/lib/mini/hoon
(slap !>(.) (ream '=>\0a|_  x=@\0a++  add\0a|=(p=[x=@ y=@] (^add x x.p))\0a--\0a=/  origin  ~(. + 50)\0a(add:origin [70 80])'))
(slap !>(mini) (ream '(add 3 39)'))
(slap !>(mini) (ream '=>\0a|_  x=@\0a++  add\0a|=(p=[x=@ y=@] (^add x x.p))\0a--\0a=/  origin  ~(. + 50)\0a(add:origin [70 80])'))
(slap !>(mini) (ream '=>\0a|_  x=@\0a++  add\0a|=(p=[x=@ y=@] (^add x x.p))\0a--\0a=/  origin  ~(. + 50)\0aorigin'))
(slap !>(mini) (ream '=>\0a|_  x=@\0a++  dd\0a|=(p=[x=@ y=@] (add x x.p))\0a--\0a=/  origin  ~(. + 50)\0a(dd:origin [70 80])'))

*/

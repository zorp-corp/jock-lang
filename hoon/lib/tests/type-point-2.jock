compose
  class Point(x:@ y:@) {
    // new() is the required constructor
    new(p:Point) -> Point {
      // the return from any method must match the state shape
      (p.x p.y)
    }
    add(p:Point q:Point) -> Point {
      // we don't have infix operators yet so this is just a weird hack
      (p.x q.y)
    }
    copy(p:Point) -> Point {
      // return the current state
      (p.x p.y)
    }
  }
; // end compose

// uses the implicit new() constructor
let origin = Point(50 60);
let vector = Point(70 80);

origin.add(Point(10 20) Point(30 40))

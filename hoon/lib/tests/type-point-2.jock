compose
  class Point(x:Uint y:Uint) {
   add(p:(x:Uint y:Uint)) -> Point {
     (x + p.x
      y + p.y)
   }
   sub(p:(x:Uint y:Uint)) -> Point {
     (x - p.x
      y - p.y)
   }
  }
;

let point-1 = Point(104 124);
point-1 = point-1.add(38 38);
let point-2 = Point(30 40);
//&2
point-2 = point-2.add(212 302);
//&1
point-1 = point-1.sub(100 20);
//&1
( (point-1.x() point-1.y())
  (point-2.x() point-2.y())
)/**/

/*
::  Hoon equivalent program
!=
=>  mini=mini
=>
  ^=  door
  |_  [x=@ y=@]
  ++  add
    |=  p=[x=@ y=@]
    ~(. +> [(add:mini x x.p) (add:mini y y.p)])
  ++  sub
    |=  p=[x=@ y=@]
    ~(. +> [(sub:mini x x.p) (sub:mini y y.p)])
  --
=/  point-1
  ~(. door [104 124])
=.  point-1  (add:point-1 [38 38])
=/  point-2
  ~(. door [30 40])
=.  point-1  (sub:point-1 [100 20])
=.  point-2  (add:point-2 [212 302])
[[+12 +13]:point-1 [+12 +13]:point-2]

Jock:
[7 [0 2]
 7 [8 [[1 0] 1 0]
      [1 [8 [[1 0] 1 0] [1 [8 [9 348 0 62] 9 2 10 [6 7 [0 3] [0 60] 0 12] 0 2] 8 [9 348 0 62] 9 2 10 [6 7 [0 3] [0 61] 0 13] 0 2] 0 1]
          8 [[1 0] 1 0] [1 [8 [9 3.061 0 62] 9 2 10 [6 7 [0 3] [0 60] 0 12] 0 2] 8 [9 3.061 0 62] 9 2 10 [6 7 [0 3] [0 61] 0 13] 0 2] 0 1] 0 1]
 8 [8 [0 1] 10 [6 7 [0 3] [1 104] 1 124] 0 2]
 7 [10 [2 8 [7 [0 2] 9 4 0 1] 9 2 10 [6 7 [0 3] [1 38] 1 38] 0 2] 0 1]
 8 [8 [0 3] 10 [6 7 [0 3] [1 30] 1 40] 0 2]
 7 [10 [2 8 [7 [0 2] 9 4 0 1] 9 2 10 [6 7 [0 3] [1 212] 1 302] 0 2] 0 1]
 7 [10 [6 8 [7 [0 6] 9 5 0 1] 9 2 10 [6 7 [0 3] [1 100] 1 20] 0 2] 0 1]
 [[7 [0 6] 7 [0 6] 0 2] 7 [0 6] 7 [0 6] 0 3]
  [7 [0 2] 7 [0 6] 0 2] 7 [0 2] 7 [0 6] 0 3]

:: TODO: fix instance return stuff now, I *think* calls are okay

Hoon:
[ 7 [0 4]
  7 [8 [1 0 0]
       [1 [8 [1 0 0] [1 8 [0 7] 10 [6 7 [0 3] [8 [7 [0 31] 9 348 0 1] 9 2 10 [6 [0 124] 0 28] 0 2] 8 [7 [0 31] 9 348 0 1] 9 2 10 [6 [0 125] 0 29] 0 2] 0 2] 0 1]
           8 [1 0 0] [1 8 [0 7] 10 [6 7 [0 3] [8 [7 [0 31] 9 3.061 0 1] 9 2 10 [6 [0 124] 0 28] 0 2] 8 [7 [0 31] 9 3.061 0 1] 9 2 10 [6 [0 125] 0 29] 0 2] 0 2] 0 1] 0 1]
  8 [8 [0 1] 10 [6 7 [0 3] 1 104 124] 0 2]
  7 [10 [2 8 [7 [0 2] 9 4 0 1] 9 2 10 [6 7 [0 3] 1 38 38] 0 2] 0 1]
* 8 [8 [0 3] 10 [6 7 [0 3] 1 30 40] 0 2]
  7 [10 [2 8 [7 [0 2] 9 4 0 1] 9 2 10 [6 7 [0 3] 1 212 302] 0 2] 0 1]
  7 [10 [6 8 [7 [0 6] 9 5 0 1] 9 2 10 [6 7 [0 3] 1 100 20] 0 2] 0 1]
  [7 [0 6] [0 12] 0 13]
  7 [0 2] [0 12] 0 13]
*/

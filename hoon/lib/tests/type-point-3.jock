compose
  class Point(x:@ y:@) {
    add(p:(x:@ y:@)) -> Point {
      (x + p.x
       y + p.y)
    }
    add-cell(p:(x:@ y:@)) -> (@ @) {
      (x + p.x
       y + p.y)
    }
    inc(q:@) -> @ {
      +(q)
    }
  }
;

let one = Point(2 13);
let two = one.add(30 19);
let three = one.inc(41);
two.add-cell(10 10)

/*
:: notice that in this Hoon, pigeon is the sample
:: while in Jock it's an instance ~(. door pigeon)
!=
=>  mini=mini
=>
  ^=  door
  |_  [x=@ y=@]
  ++  add
    |=  p=[x=@ y=@]
    [(add:mini x x.p) (add:mini y y.p)]
  ++  inc
    |=  q=@
    +(q)
  --
=/  origin
  ~(. door [50 40])
=/  pigeon  (add:origin [70 80])
~(. door pigeon)
*/

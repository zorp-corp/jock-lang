compose
  class Point(x:@ y:@) {
    add(p:(x:@ y:@)) -> Point {
      (x + p.x
       y + p.y)
    }
    add-cell(p:(x:@ y:@)) -> (@ @) {
      (x + p.x
       y + p.y)
    }
    inc(q:@) -> @ {
      +(q)
    }
  }
;

let one = Point(2 13);
let two = one.add(30 19);
let three = one.inc(41);
(two.add-cell(10 10) three)

/*
::  Hoon equivalent program
!=
=>  mini=mini
=>
  ^=  door
  |_  [x=@ y=@]
  ++  add
    |=  p=[x=@ y=@]
    ~(. +> [(add:mini x x.p) (add:mini y y.p)])
  ++  add-cell
    |=  p=[x=@ y=@]
    [(add:mini x x.p) (add:mini y y.p)]
  ++  inc
    |=  q=@
    +(q)
  --
=/  one
  ~(. door [2 13])
=/  two  (add:one [30 19])
=/  three  (inc:one 41)
[(add-cell:two [10 10]) three]
*/
